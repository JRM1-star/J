//MIDPOINT ELLIPSE DRAWING ALGORITHM
#include <conio.h>
#include <stdio.h>
#include <graphics.h>
void main() {
    int gd = DETECT, gm;
    float x, y, xc, yc, rx, ry, pk, pk1;
    clrscr();
    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");
    printf("Midpoint Ellipse Drawing Algorithm\n");
    printf("Enter center for ellipse\nx: ");
    scanf("%f", &xc);
    printf("y: ");
    scanf("%f", &yc);
    printf("Enter x radius and y radius\nx radius: ");
    scanf("%f", &rx);
    printf("y radius: ");
    scanf("%f", &ry);
    x = 0;
    y = ry;
    pk = (ry * ry) - (rx * rx * ry) + (rx * rx) / 4;
    
    // Region 1
    while ((2 * x * ry * ry) < (2 * y * rx * rx)) {
        putpixel(xc + x, yc + y, 2);
        putpixel(xc - x, yc + y, 2);
        putpixel(xc + x, yc - y, 2);
        putpixel(xc - x, yc - y, 2);
        if (pk <= 0) {
            x = x + 1;
            pk1 = pk + (2 * ry * ry * x) + (ry * ry);
        } else {
            x = x + 1;
            y = y - 1;
            pk1 = pk + (2 * ry * ry * x) - (2 * rx * rx * y) + (ry * ry);
        }
        pk = pk1;
    }
    // Region 2
    pk = ((x + 0.5) * (x + 0.5) * ry * ry) + ((y - 1) * (y - 1) * rx * rx) - (rx * rx * ry * ry);
    while (y > 0) {
        putpixel(xc + x, yc + y, 2);
        putpixel(xc - x, yc + y, 2);
        putpixel(xc + x, yc - y, 2);
        putpixel(xc - x, yc - y, 2);
        if (pk > 0) {
            y = y - 1;
            pk1 = pk - (2 * rx * rx * y) + (rx * rx);
        } else {
            x = x + 1;
            y = y - 1;
            pk1 = pk + (2 * ry * ry * x) - (2 * rx * rx * y) + (rx * rx);
        }
        pk = pk1;
    }
    getch();
    closegraph();
}

//9.KOCH CURVE
#include <graphics.h>
#include <conio.h>
#include <math.h>
#include <stdio.h>
void koch(int x1, int y1, int x2, int y2, int it) {
    float angle = 60 * M_PI / 180;
    int x3 = (2 * x1 + x2) / 3;
    int y3 = (2 * y1 + y2) / 3;
    int x4 = (x1 + 2 * x2) / 3;
    int y4 = (y1 + 2 * y2) / 3;
    int x = x3 + (x4 - x3) * cos(angle) - (y4 - y3) * sin(angle);
    int y = y3 + (x4 - x3) * sin(angle) + (y4 - y3) * cos(angle);
    if (it > 0) {
        koch(x1, y1, x3, y3, it - 1);
        koch(x3, y3, x, y, it - 1);
        koch(x, y, x4, y4, it - 1);
        koch(x4, y4, x2, y2, it - 1);
    } else {
        line(x1, y1, x3, y3);
        line(x3, y3, x, y);
        line(x, y, x4, y4);
        line(x4, y4, x2, y2);
    }
}
int main(void) {
    int gd = DETECT, gm;
    int x1 = 100, y1 = 300, x2 = 500, y2 = 300;
    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");
    // Draw the Koch curve
    koch(x1, y1, x2, y2, 4);
    getch();
    closegraph();
    return 0;
}

//8.To implement 3D Transformation operations in C (only Translation &amp; Scaling). 
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <math.h>

int maxx, maxy, midx, midy;

void axis() {
    getch();
    cleardevice();
    line(midx, 0, midx, maxy);
    line(0, midy, maxx, midy);
}

void main() {
    int gd, gm, x, y, z, ang, x1, x2, y1, y2;

    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:/Turbo c3/BGI");

    setfillstyle(3, 25);
    maxx = getmaxx();
    maxy = getmaxy();
    midx = maxx / 2;
    midy = maxy / 2;

    outtextxy(100, 100, "ORIGINAL OBJECT");
    line(midx, 0, midx, maxy);
    line(0, midy, maxx, midy);
    bar3d(midx + 100, midy - 20, midx + 60, midy - 90, 20, 5);
    
    axis();
    outtextxy(100, 20, "TRANSLATION");
    
    printf("\n\n Enter the Translation vector: ");
    scanf("%d%d", &x, &y);
    
    bar3d(midx + 100, midy - 20, midx + 60, midy - 90, 20, 5);
    bar3d(midx + (x + 100), midy - (y + 20), midx + (x + 60), midy - (y + 90), 20, 5);
    
    axis();
    outtextxy(100, 20, "SCALING");
    
    printf("\n Enter the Scaling Factor: ");
    scanf("%d%d%d", &x, &y, &z);
    
    bar3d(midx + 100, midy - 20, midx + 60, midy - 90, 20, 5);
    bar3d(midx + (x * 100), midy - (y * 20), midx + (x * 60), midy - (y * 90), 20 * z, 5);
    
    axis();
    outtextxy(100, 20, "ROTATION");
    
    printf("\n Enter the Rotation angle: ");
    scanf("%d", &ang);
    
    x1 = 100 * cos(ang * M_PI / 180) - 20 * sin(ang * M_PI / 180);
    y1 = 100 * sin(ang * M_PI / 180) + 20 * cos(ang * M_PI / 180);
    x2 = 60 * cos(ang * M_PI / 180) - 90 * sin(ang * M_PI / 180);
    y2 = 60 * sin(ang * M_PI / 180) + 90 * cos(ang * M_PI / 180);
    
    axis();
    printf("\n After rotating about z-axis\n");
    bar3d(midx + 100, midy - 20, midx + 60, midy - 90, 20, 5);
    bar3d(midx + x1, midy - y1, midx + x2, midy - y2, 20, 5);
    
    axis();
    printf("\n After rotating about x-axis\n");
    bar3d(midx + 100, midy - 20, midx + 60, midy - 90, 20, 5);
    bar3d(midx + 100, midy - x1, midx + 60, midy - y2, 20, 5);
    
    axis();
    printf("\n After rotating about y-axis\n");
    bar3d(midx + 100, midy - 20, midx + 60, midy - 90, 20, 5);
    bar3d(midx + x1, midy - 20, midx + x2, midy - 90, 20, 5);
    
    axis();
    closegraph();
}

//7: To implement Cohen Sutherland line clipping algorithm   
#include <graphics.h>
#include <math.h>
#include <stdio.h>
#include <conio.h>

void bytecode();
void sutherland();

int a[5], b[5];
float m, xnew, ynew;

// Define clipping rectangle and line coordinates
float xl = 90, yl = 120, xh = 300, yh = 300, xa = 50, ya = 200, xb = 200, yb = 150;

void main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    
    setcolor(5);
    line(xa, ya, xb, yb);
    setcolor(12);
    rectangle(xl, yl, xh, yh);
    
    m = (yb - ya) / (xb - xa);
    bytecode();
    sutherland();
    
    getch();
}

void bytecode() {
    // Calculate outcodes for point A
    a[3] = (xa < xl) ? 1 : 0; // left
    a[2] = (xa > xh) ? 1 : 0; // right
    a[1] = (ya < yl) ? 1 : 0; // bottom
    a[0] = (ya > yh) ? 1 : 0; // top
    
    // Calculate outcodes for point B
    b[3] = (xb < xl) ? 1 : 0; // left
    b[2] = (xb > xh) ? 1 : 0; // right
    b[1] = (yb < yl) ? 1 : 0; // bottom
    b[0] = (yb > yh) ? 1 : 0; // top
}

void sutherland() {
    printf("Press a key to continue...");
    getch();

    // Check for trivial acceptance
    if (a[0] == 0 && a[1] == 0 && a[2] == 0 && a[3] == 0 &&
        b[0] == 0 && b[1] == 0 && b[2] == 0 && b[3] == 0) {
        printf("No clipping\n");
        line(xa, ya, xb, yb);
    }
    // Check for trivial rejection
    else if (a[0] && b[0] || a[1] && b[1] || a[2] && b[2] || a[3] && b[3]) {
        clrscr();
        printf("Line discarded\n");
        rectangle(xl, yl, xh, yh);
    }
    // Perform clipping
    else {
        if (a[3] == 1 && b[3] == 0) {
            ynew = (m * (xl - xa)) + ya;
            setcolor(12);
            rectangle(xl, yl, xh, yh);
            setcolor(0);
            line(xa, ya, xb, yb);
            setcolor(15);
            line(xl, ynew, xb, yb);
        } else if (a[2] == 1 && b[2] == 0) {
            ynew = (m * (xh - xa)) + ya;
            setcolor(12);
            rectangle(xl, yl, xh, yh);
            setcolor(0);
            line(xa, ya, xb, yb);
            setcolor(15);
            line(xh, ynew, xb, yb);
        } else if (a[1] == 1 && b[1] == 0) {
            xnew = xa + (yl - ya) / m;
            setcolor(0);
            line(xa, ya, xb, yb);
            setcolor(15);
            line(xnew, yh, xb, yb);
        } else if (a[0] == 1 && b[0] == 0) {
            xnew = xa + (yh - ya) / m;
            setcolor(0);
            line(xa, ya, xb, yb);
            setcolor(15);
            line(xnew, yh, xb, yb);
        }
    }
}

//6.Implement 2D Transformations: Translation, Scaling, Rotation using switch case.   
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <math.h>

void main() {
    int gd = DETECT, gm;
    int x1, y1, x2, y2, tx, ty, x3, y3, x4, y4;

    initgraph(&gd, &gm, "C:\\TurboC3\\BGI");

    printf("Enter the starting point of line segment: ");
    scanf("%d %d", &x1, &y1);
    printf("Enter the ending point of line segment: ");
    scanf("%d %d", &x2, &y2);
    printf("Enter translation distances tx, ty:\n");
    scanf("%d %d", &tx, &ty);

    setcolor(5);
    line(x1, y1, x2, y2);
    outtextxy(x2 + 2, y2 + 2, "Original line");

    x3 = x1 + tx;
    y3 = y1 + ty;
    x4 = x2 + tx;
    y4 = y2 + ty;

    setcolor(7);
    line(x3, y3, x4, y4);
    outtextxy(x4 + 2, y4 + 2, "Line after translation");

    getch();
}
2. Program for scaling:   
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <math.h>

void main() {
    int gd = DETECT, gm;
    float x1, y1, x2, y2, sx, sy, x3, y3, x4, y4;

    initgraph(&gd, &gm, "C:\\TurboC3\\BGI");

    printf("Enter the starting point coordinates: ");
    scanf("%f %f", &x1, &y1);
    printf("Enter the ending point coordinates: ");
    scanf("%f %f", &x2, &y2);
    printf("Enter scaling factors sx, sy:\n");
    scanf("%f %f", &sx, &sy);

    setcolor(5);
    line(x1, y1, x2, y2);
    outtextxy(x2 + 2, y2 + 2, "Original line");

    x3 = x1 * sx;
    y3 = y1 * sy;
    x4 = x2 * sx;
    y4 = y2 * sy;

    setcolor(7);
    line(x3, y3, x4, y4);
    outtextxy(x3 + 2, y3 + 2, "Line after scaling");

    getch();
}
3. Program for Rotation:   
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <math.h>

void main() {
    int gd = DETECT, gm;
    float x1, y1, x2, y2, x3, y3, x4, y4, a, t;

    initgraph(&gd, &gm, "C:\\TurboC3\\BGI");

    printf("Enter coordinates of starting point:\n");
    scanf("%f %f", &x1, &y1);
    printf("Enter coordinates of ending point:\n");
    scanf("%f %f", &x2, &y2);
    printf("Enter angle for rotation:\n");
    scanf("%f", &a);

    setcolor(5);
    line(x1, y1, x2, y2);
    outtextxy(x2 + 2, y2 + 2, "Original line");

    t = a * (M_PI / 180);  // Use M_PI for more accuracy
    x3 = (x1 * cos(t)) - (y1 * sin(t));
    y3 = (x1 * sin(t)) + (y1 * cos(t));
    x4 = (x2 * cos(t)) - (y2 * sin(t));
    y4 = (x2 * sin(t)) + (y2 * cos(t));

    setcolor(7);
    line(x3, y3, x4, y4);
    outtextxy(x3 + 2, y3 + 2, "Line after rotation");

    getch();
} 

//To implement midpoint ellipse algorithm  
#include <conio.h>
#include <stdio.h>
#include <graphics.h>

void main() {
    int gd = DETECT, gm;
    float x, y, xc, yc, rx, ry, pk, pk1;

    clrscr();
    initgraph(&gd, &gm, "..\\bgi");

    printf("Mid point ellipse drawing algorithm\n");
    printf("Enter Center for ellipse\n");
    printf("x: ");
    scanf("%f", &xc);
    printf("y: ");
    scanf("%f", &yc);
    
    printf("Enter x-radius and y-radius\n");
    printf("x-radius: ");
    scanf("%f", &rx);
    printf("y-radius: ");
    scanf("%f", &ry);

    x = 0;
    y = ry;
    pk = (ry * ry) - (rx * rx * ry) + ((rx * rx) / 4);

    while ((2 * x * ry * ry) < (2 * y * rx * rx)) {
        if (pk <= 0) {
            x = x + 1;
            pk1 = pk + (2 * ry * ry * x) + (ry * ry);
        } else {
            x = x + 1;
            y = y - 1;
            pk1 = pk + (2 * ry * ry * x) - (2 * rx * rx * y) + (ry * ry);
        }
        pk = pk1;

        putpixel(xc + x, yc + y, 2);
        putpixel(xc - x, yc + y, 2);
        putpixel(xc + x, yc - y, 2);
        putpixel(xc - x, yc - y, 2);
    }

    pk = ((x + 0.5) * (x + 0.5) * ry * ry) + ((y - 1) * (y - 1) * rx * rx) - (rx * rx * ry * ry);
    
    while (y > 0) {
        if (pk > 0) {
            y = y - 1;
            pk1 = pk + (2 * rx * rx * y) + (rx * rx);
        } else {
            x = x + 1;
            y = y - 1;
            pk1 = pk + (2 * ry * ry * x) - (2 * rx * rx * y) + (rx * rx);
        }
        pk = pk1;

        putpixel(xc + x, yc + y, 2);
        putpixel(xc - x, yc + y, 2);
        putpixel(xc + x, yc - y, 2);
        putpixel(xc - x, yc - y, 2);
    }

    getch();
}

//3.To implement midpoint Circle algorithm.
 #include <stdio.h>
#include <graphics.h>
#include <conio.h>

void main() {
    int xc, yc, x, y, p, r;
    int gdriver = DETECT, gmode;

    initgraph(&gdriver, &gmode, "C:\\TurboC++\\Disk\\TURBOC3\\BGI");

    printf("Enter co-ordinates of centre: ");
    xc = 100; 
    yc = 200;

    printf("Enter radius of circle: ");
    r = 40;

    x = 0; 
    y = r; 
    p = 1 - r;

    do {
        if (p < 0) {
            x = x + 1; 
            p = p + 2 * x + 1;
        } else {
            x = x + 1; 
            y = y - 1; 
            p += 2 * x - 2 * y + 1;
        }

        putpixel(xc + x, yc + y, WHITE);
        putpixel(xc + y, yc + x, WHITE);
        putpixel(xc + x, yc - y, WHITE);
        putpixel(xc + y, yc - x, WHITE);
        putpixel(xc - x, yc - y, WHITE);
        putpixel(xc - y, yc - x, WHITE);
        putpixel(xc - x, yc + y, WHITE);
        putpixel(xc - y, yc + x, WHITE);
        
    } while (x <= y);

    getch();
    closegraph();
}

//2.: To implement Bresenham’s Line algorithm.
#include <stdio.h>
#include <conio.h>
#include <graphics.h>

int gd = DETECT, gm;

void main() {
    int x1, y1, x2, y2, delx, dely, p;

    clrscr();
    initgraph(&gd, &gm, "");

    printf("\n Enter the end points of the line -> ");
    scanf("%d %d %d %d", &x1, &y1, &x2, &y2);

    putpixel(x1, y1, 3);

    delx = x2 - x1;
    dely = y2 - y1;
    p = (2 * dely) - delx;

    while (delx > 0) {
        if (p < 0) {
            x1++;
            putpixel(x1, y1, 3);
            p += (2 * dely);
        } else {
            x1++;
            y1++;
            putpixel(x1, y1, 3);
            p += (2 * dely) - (2 * delx);
        }
        delx--;
    }

    getch();
}

//1.To implement DDA line drawing algorithm in C.   
 #include <stdio.h>
#include <graphics.h>
#include <conio.h>

void main() {
    int x, y, x1, y1, x2, y2, p, dx, dy;
    int gd = DETECT, gm;

    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    printf("\nEnter the x-coordinate of the first point: ");
    scanf("%d", &x1);
    printf("\nEnter the y-coordinate of the first point: ");
    scanf("%d", &y1);
    printf("\nEnter the x-coordinate of the second point: ");
    scanf("%d", &x2);
    printf("\nEnter the y-coordinate of the second point: ");
    scanf("%d", &y2);

    x = x1;
    y = y1;
    dx = x2 - x1;
    dy = y2 - y1;

    p = (2 * dy - dx);

    while (x <= x2) {
        if (p < 0) {
            x = x + 1;
            p = p + 2 * dy;
        } else {
            x = x + 1;
            y = y + 1;
            p = p + (2 * dy) - (2 * dx);
        }
        putpixel(x, y, YELLOW);
    }

    getch();
    closegraph();
}

//BOUNDARY FILL ALGORITHM
#include <stdio.h>
#include <graphics.h>
#include <dos.h>
void boundaryfill(int x, int y, int f_color, int b_color) {
    // Check if the current pixel is not the boundary color and not the fill color
    if (getpixel(x, y) != b_color && getpixel(x, y) != f_color) {
        // Set the pixel to the fill color
        putpixel(x, y, f_color);
        
        // Recursive calls to fill in all four directions
        boundaryfill(x + 1, y, f_color, b_color); // Right
        boundaryfill(x - 1, y, f_color, b_color); // Left
        boundaryfill(x, y + 1, f_color, b_color); // Down
        boundaryfill(x, y - 1, f_color, b_color); // Up
    }
}
int main() {
    int gm, gd = DETECT, radius;
    int x, y;
    // Get user input for circle center and radius
    printf("Enter x and y positions for circle\n");
    scanf("%d%d", &x, &y);
    printf("Enter radius of circle\n");
    scanf("%d", &radius);
    // Initialize graphics mode
    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");
    // Draw the circle
    circle(x, y, radius);
    // Call the boundary fill function with fill color 4 (red) and boundary color 15 (white)
    boundaryfill(x, y, 4, 15);
    // Wait for a while to view the result
    delay(5000);
    // Close the graphics mode
    closegraph();
    return 0;
}
[18/10, 9:59 pm] Jayavrata Sengupta: #include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <dos.h>
void floodfill(int x, int y, int fill_color, int old_color) {
    // Check if the current pixel has the old color
    if (getpixel(x, y) == old_color) {
        // Set the pixel to the fill color
        putpixel(x, y, fill_color);
        delay(10);  // Add delay to visualize the fill process
        // Recursively call the flood fill function in all four directions
        floodfill(x + 1, y, fill_color, old_color); // Right
        floodfill(x - 1, y, fill_color, old_color); // Left
        floodfill(x, y + 1, fill_color, old_color); // Down
        floodfill(x, y - 1, fill_color, old_color); // Up
    }
}
void main() {
    int gd = DETECT, gm;
    // Initialize the graphics mode
    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");
    // Draw a rectangle on the screen
    rectangle(50, 50, 100, 100);
    // Apply flood fill from an internal point within the rectangle (51, 51)
    // with a fill color of 4 (red) and an old color of 0 (black)
    floodfill(51, 51, 4, 0);
    // Wait for a key press to exit
    getch();
    // Close the graphics mode
    closegraph();
}
